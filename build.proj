<?xml version="1.0" encoding="utf-8" ?>
<Project ToolsVersion="Latest" DefaultTargets="BuildAllConfigurations" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Import Project="src/Directory.Build.props" />
  <Import Project="$(ToolsDir)targets\GenerateNugetPackage.targets" />
  <Import Project="$(ToolsDir)targets\AlwaysProtected\GenerateEncryptionSdkNugetPackage.targets" />
  <Import Project="$(ToolsDir)targets\add-ons\GenerateAKVProviderNugetPackage.targets" />

  <PropertyGroup>
    <RestoreConfigFile>src\NuGet.config</RestoreConfigFile>
    <Configuration Condition="'$(Configuration)' == ''">Debug</Configuration>
    <Platform Condition="'$(Platform)' == ''">AnyCPU</Platform>
    <!-- Flag to control if Windows drivers should be built or not -->
    <IsEnabledWindows Condition="'$(IsEnabledWindows)' == '' AND '$(TargetsWindows)' == 'true'">true</IsEnabledWindows>
    <IsEnabledWindows Condition="'$(TargetsUnix)' == 'true'">false</IsEnabledWindows>
    <TestOS Condition="'$(TestTargetOS)' == '' AND '$(TargetsWindows)' == 'true'">Windows</TestOS>
    <TestOS Condition="'$(TestTargetOS)' == '' AND '$(TargetsUnix)' == 'true'">Unix</TestOS>
    <GenerateNuget Condition="'$(GenerateNuget)' == ''">true</GenerateNuget>
    <ProjectProperties>Configuration=$(Configuration);AssemblyFileVersion=$(AssemblyFileVersion);TargetsWindows=$(TargetsWindows);TargetsUnix=$(TargetsUnix);</ProjectProperties>
    <TestProjectProperties>BuildProjectReferences=false;$(ProjectProperties);</TestProjectProperties>
  </PropertyGroup>

  <!-- Populate all managed projects -->
  <ItemGroup>
    <NetFxDriver Include="**/netfx/**/Microsoft.Data.SqlClient*.csproj" Condition="'$(IsEnabledWindows)' == 'true'" />
    <NetCoreDriver Include="**/netcore/**/Microsoft.Data.SqlClient*.csproj" />
    <EncryptionSdk Include="**/Microsoft.Data.Encryption/Cryptography/Cryptography.csproj" />
    <AKVProvider Include="**/add-ons/**/AzureKeyVaultProvider/*.csproj" />

    <FunctionalTests Condition="$(ReferenceType.Contains('NetStandard'))" Include="**/NSLibrary/Microsoft.Data.SqlClient.NSLibrary.csproj" />
    <FunctionalTests Include="**/tools/TDS/TDS/TDS.csproj" />
    <FunctionalTests Include="**/tools/TDS/TDS.EndPoint/TDS.EndPoint.csproj" />
    <FunctionalTests Include="**/tools/TDS/TDS.Servers/TDS.Servers.csproj" />
    <FunctionalTests Include="**/tools/Microsoft.DotNet.XUnitExtensions/Microsoft.DotNet.XUnitExtensions.csproj" />
    <FunctionalTests Include="**/tools/CoreFx.Private.TestUtilities/CoreFx.Private.TestUtilities.csproj" />
    <FunctionalTests Include="**/ManualTests/SQL/UdtTest/UDTs/Address/Address.csproj" />
    <FunctionalTests Include="**/Microsoft.Data.SqlClient.Tests.csproj" />

    <ManualTests Condition="$(ReferenceType.Contains('NetStandard'))" Include="**/NSLibrary/Microsoft.Data.SqlClient.NSLibrary.csproj" />
    <ManualTests Include="**/ManualTests/SQL/UdtTest/UDTs/Address/Address.csproj" />
    <ManualTests Include="**/ManualTests/SQL/UdtTest/UDTs/Circle/Circle.csproj" />
    <ManualTests Include="**/ManualTests/SQL/UdtTest/UDTs/Shapes/Shapes.csproj" />
    <ManualTests Include="**/ManualTests/SQL/UdtTest/UDTs/Utf8String/Utf8String.csproj" />
    <ManualTests Include="**/tools/Microsoft.DotNet.XUnitExtensions/Microsoft.DotNet.XUnitExtensions.csproj" />
    <ManualTests Include="**/tools/Microsoft.Data.SqlClient.TestUtilities/Microsoft.Data.SqlClient.TestUtilities.csproj"/>
    <ManualTests Include="**/tools/CoreFx.Private.TestUtilities/CoreFx.Private.TestUtilities.csproj" />
    <ManualTests Include="**/ManualTests/Microsoft.Data.SqlClient.ManualTesting.Tests.csproj" />

    <!-- Encryption SDK tests -->
    <AzureKeyVaultProviderTests Include="**/Microsoft.Data.Encryption/AzureKeyVaultProviderTests/AzureKeyVaultProviderTests.csproj" />
    <CryptographyTests Include="**/Microsoft.Data.Encryption/CryptographyTests/CryptographyTests.csproj" />
    <FileEncryptionTests Include="**/Microsoft.Data.Encryption/FileEncryptionTests/FileEncryptionTests.csproj" />
  </ItemGroup>

  <!-- Top Level Build targets -->
  <Target Name="Restore" DependsOnTargets="RestoreNetCore;RestoreNetFx" />
  <Target Name="BuildAll" DependsOnTargets="BuildNetFx;BuildNetCore" />
	<Target Name="BuildAllConfigurations" DependsOnTargets="Restore;BuildNetFx;BuildNetCoreAllOS;GenerateEncryptionSdkNugetPackage;GenerateNugetPackage" />
  <Target Name="BuildTestsNetCore" DependsOnTargets="RestoreTestsNetCore;BuildAKVNetCore;BuildFunctionalTestsNetCore;BuildManualTestsNetCore" />
  <Target Name="BuildTestsNetFx" DependsOnTargets="RestoreTestsNetFx;BuildAKVNetFx;BuildFunctionalTestsNetFx;BuildManualTestsNetFx;" />

  <Target Name="RestoreNetCore">
    <MSBuild Projects="@(NetCoreDriver)" Targets="restore" Properties="TestTargetOS=$(TestOS)netcoreapp" />
  </Target>

  <Target Name="RestoreTestsNetCore">
    <MSBuild Projects="@(ManualTests)" Targets="restore" Properties="TestTargetOS=$(TestOS)netcoreapp" />
    <MSBuild Projects="@(FunctionalTests)" Targets="restore" Properties="TestTargetOS=$(TestOS)netcoreapp" />
  </Target>

  <Target Name="RestoreNetFx" Condition="'$(IsEnabledWindows)' == 'true'">
    <MSBuild Projects="@(NetFxDriver)" Targets="restore" Properties="TestTargetOS=$(TestOS)netfx" />
  </Target>

  <Target Name="RestoreTestsNetFx">
    <MSBuild Projects="@(ManualTests)" Targets="restore" Properties="TestTargetOS=$(TestOS)netfx" />
    <MSBuild Projects="@(FunctionalTests)" Targets="restore" Properties="TestTargetOS=$(TestOS)netfx" />
  </Target>

	<Target Name="RestoreEncryptionSdk">
		<MSBuild Projects="@(EncryptionSdk)" Targets="restore" />
	</Target>

	<Target Name="RestoreTestsEncryptionSdk">
		<MSBuild Projects="@(AzureKeyVaultProviderTests)" Targets="restore" />
		<MSBuild Projects="@(CryptographyTests)" Targets="restore" />
		<MSBuild Projects="@(FileEncryptionTests)" Targets="restore" />
	</Target>

  <Target Name="BuildNetFx" DependsOnTargets="RestoreNetFx" Condition="'$(IsEnabledWindows)' == 'true'">
    <MSBuild Projects="@(NetFxDriver)" Properties="Platform=AnyCPU;$(ProjectProperties)" />
  </Target>

  <Target Name="BuildNetCore" DependsOnTargets="RestoreNetCore">
    <MSBuild Projects="@(NetCoreDriver)" Properties="Platform=AnyCPU;$(ProjectProperties)" />
  </Target>

	<Target Name="BuildEncryptionSdk" DependsOnTargets="RestoreEncryptionSdk">
		<MSBuild Projects="@(EncryptionSdk)" Properties="Configuration=$(Configuration);Platform=$(Platform);TargetsWindows=$(TargetsWindows)" />
	</Target>

  <Target Name="BuildNetCoreAllOS" DependsOnTargets="RestoreNetCore">
    <MSBuild Projects="@(NetCoreDriver)" Properties="$(ProjectProperties);Platform=AnyCPU;OSGroup=Unix;" RemoveProperties="TargetsWindows;TargetsUnix;" />
    <MSBuild Projects="@(NetCoreDriver)" Properties="$(ProjectProperties);Platform=AnyCPU;OSGroup=Windows_NT;" RemoveProperties="TargetsWindows;TargetsUnix;" Condition="'$(IsEnabledWindows)' == 'true'" />
    <MSBuild Projects="@(NetCoreDriver)" Properties="$(ProjectProperties);Platform=AnyCPU;OSGroup=AnyOS;" RemoveProperties="TargetsWindows;TargetsUnix;" />
  </Target>

  <Target Name="BuildFunctionalTestsNetCore" DependsOnTargets="RestoreTestsNetCore">
    <!-- Only build platform specific builds for Package reference types -->
    <MSBuild Projects="@(FunctionalTests)" Properties="TestTargetOS=$(TestOS)netcoreapp;$(TestProjectProperties);Platform=AnyCPU;" Condition="!$(ReferenceType.Contains('Package'))" />
    <MSBuild Projects="@(FunctionalTests)" Properties="TestTargetOS=$(TestOS)netcoreapp;$(TestProjectProperties);Platform=$(Platform);" Condition="$(ReferenceType.Contains('Package'))"/>
  </Target>

  <Target Name="BuildManualTestsNetCore" DependsOnTargets="RestoreTestsNetCore">
    <!-- Only build platform specific builds for Package reference types -->
    <MSBuild Projects="@(ManualTests)" Properties="TestTargetOS=$(TestOS)netcoreapp;$(TestProjectProperties);Platform=AnyCPU;" Condition="!$(ReferenceType.Contains('Package'))"/>
    <MSBuild Projects="@(ManualTests)" Properties="TestTargetOS=$(TestOS)netcoreapp;$(TestProjectProperties);Platform=$(Platform);" Condition="$(ReferenceType.Contains('Package'))"/>
  </Target>

  <Target Name="BuildFunctionalTestsNetFx" DependsOnTargets="RestoreTestsNetFx;BuildNetFx" Condition="'$(IsEnabledWindows)' == 'true'">
    <MSBuild Projects="@(FunctionalTests)" Properties="TestTargetOS=$(TestOS)netfx;$(TestProjectProperties);Platform=$(Platform);" />
  </Target>

	<Target Name="BuildManualTestsNetFx" DependsOnTargets="RestoreTestsNetFx;BuildNetFx" Condition="'$(IsEnabledWindows)' == 'true'">
		<MSBuild Projects="@(ManualTests)" Properties="TestTargetOS=$(TestOS)netfx;$(TestProjectProperties);Platform=$(Platform);" />
	</Target>

  <Target Name="BuildEncryptionSdkTests" DependsOnTargets="RestoreTestsEncryptionSdk">
    <MSBuild Projects="@(AzureKeyVaultProviderTests)" Properties="Configuration=$(Configuration);Platform=$(Platform)" />
    <MSBuild Projects="@(CryptographyTests)" Properties="Configuration=$(Configuration);Platform=$(Platform)" />
    <MSBuild Projects="@(FileEncryptionTests)" Properties="Configuration=$(Configuration);Platform=$(Platform)" />
  </Target>

  <Target Name="Clean">
    <RemoveDir Directories='$([System.IO.Directory]::GetDirectories(".","artifacts", SearchOption.AllDirectories))' />
    <RemoveDir Directories='$([System.IO.Directory]::GetDirectories(".","bin", SearchOption.AllDirectories))' />
    <RemoveDir Directories='$([System.IO.Directory]::GetDirectories(".","obj", SearchOption.AllDirectories))' />
    <RemoveDir Directories='$([System.IO.Directory]::GetDirectories(".","packages", SearchOption.AllDirectories))' />
    <RemoveDir Directories='$([System.IO.Directory]::GetDirectories(".",".nuget", SearchOption.AllDirectories))' />
  </Target>

  <Target Name="BuildAKVNetFx" Condition="'$(IsEnabledWindows)' == 'true' AND !$(ReferenceType.Contains('NetStandard'))">
    <MSBuild Projects="@(AKVProvider)" Targets="restore" Properties="TestTargetOS=$(TestOS)netfx" />
    <MSBuild Projects="@(AKVProvider)" Properties="TestTargetOS=$(TestOS)netfx;Platform=$(Platform);$(TestProjectProperties)" />
  </Target>

  <Target Name="BuildAKVNetCore">
    <MSBuild Projects="@(AKVProvider)" Targets="restore" Properties="TestTargetOS=$(TestOS)netcoreapp" />
    <!-- Only build platform specific builds for Package reference types -->
    <MSBuild Projects="@(AKVProvider)" Properties="TestTargetOS=$(TestOS)netcoreapp;$(ProjectProperties);Platform=AnyCPU;" Condition="!$(ReferenceType.Contains('Package'))"/>
    <MSBuild Projects="@(AKVProvider)" Properties="TestTargetOS=$(TestOS)netcoreapp;$(ProjectProperties);Platform=$(Platform);" Condition="$(ReferenceType.Contains('Package'))"/>
  </Target>

  <Target Name="BuildAKVNetCoreAllOS">
    <MSBuild Projects="@(AKVProvider)" Targets="restore" Properties="TestTargetOS=$(TestOS)netcoreapp" />
    <MSBuild Projects="@(AKVProvider)" Properties="TestTargetOS=$(TestOS)netcoreapp;$(ProjectProperties);Platform=AnyCPU;OSGroup=Unix;" RemoveProperties="TargetsWindows;TargetsUnix;" />
    <MSBuild Projects="@(AKVProvider)" Properties="TestTargetOS=$(TestOS)netcoreapp;$(ProjectProperties);Platform=AnyCPU;OSGroup=Windows_NT;" RemoveProperties="TargetsWindows;TargetsUnix;" Condition="'$(IsEnabledWindows)' == 'true'" />
    <MSBuild Projects="@(AKVProvider)" Properties="TestTargetOS=$(TestOS)netcoreapp;$(ProjectProperties);Platform=AnyCPU;OSGroup=AnyOS;" RemoveProperties="TargetsWindows;TargetsUnix;" />
  </Target>

</Project>
